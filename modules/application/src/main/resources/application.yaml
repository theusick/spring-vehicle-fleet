server:
  port: ${BACKEND_SERVER_PORT:8080}
  # Set server that when it receives the SIGTERM signal, it no longer accepts
  # new requests, but at the same time completed those that are already in
  # operation during the time specified in the
  # `spring.lifecycle.timeout-per-shutdown-phase`
  # default is 30 seconds
  # read more here: https://habr.com/en/companies/maxilect/articles/666090/
  shutdown: graceful
  servlet:
    encoding:
      # Charset of HTTP requests and responses.
      # Added to the "Content-Type" header if not set explicitly
      charset: UTF-8
      # Enable http encoding support
      enabled: true
      force: true

  tomcat:
    # Set Tomcat how long to wait after opening the connection before receiving
    # the request. It can be useful to protect against DDoS attacks when the client
    # establishes a connection, the server allocates a stream to process it,
    # but the request does not arrive.
    # Tomcat will spend the same time reading the request body.
    connection-timeout: 3s
    # Time during which Tomcat keeps the connection open, waiting for new requests
    keep-alive-timeout: 20s
    # Tomcat uses a thread pool to handle incoming connections:
    # one connection is one thread.
    # By default, the maximum number of threads in the pool is 200.
    threads:
      max: 200
      # Min number of threads that will be created in the pool when the server starts
      min-spare: 10

#  https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
spring:
  application:
    name: fleet-backend

  lifecycle:
    timeout-per-shutdown-phase: 30s

  datasource:
    url: ${BACKEND_DB_URL:jdbc:postgresql://localhost:5432/database}
    username: ${POSTGRES_USERNAME:user}
    password: ${POSTGRES_PASSWORD:hackme}
    driver-class-name: org.postgresql.Driver
    hikari:
      # timeout to receive a connection from the connection pool
      connection-timeout: 2000 # ms
      # Recommendation:
      # connections = ((core_count * 2) + effective_spindle_count)
      # where
      # core_count - number of processor cores
      # effective_spindle_count - the number of rotating disks
      # Since we assume that an SSD will be used, there will be no rotating disks,
      # therefore, effective_spindle_count = 0
      maximum-pool-size: 8

  flyway:
    enabled: true
    url: ${BACKEND_DB_URL:jdbc:postgresql://localhost:5432/database}
    user: ${POSTGRES_USERNAME:user}
    password: ${POSTGRES_PASSWORD:hackme}
    locations: classpath:db/migration
    baseline-on-migrate: true

  mvc:
    # is used for HTML pages to allow usage of PUT/POST methods
    # by setting up hidden input form
    hiddenmethod.filter:
      enabled: true

  jpa:
    properties:
      hibernate:
        jdbc:
          time_zone: 'UTC'

security:
  jwt:
    secret-key: ${BACKEND_JWT_SECRET}
    expiration-time: 1800000

graphhopper:
  api:
    url: ${BACKEND_GRAPHHOPPER_URL:https://graphhopper.com/api/1}
    key: ${BACKEND_GRAPHHOPPER_API_KEY}

springdoc:
  swagger-ui:
    path: /
